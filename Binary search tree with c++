#include <iostream>
using namespace std;

class node {
public:
    int data;
    node* left;
    node* right;

    node(int data) {
        this->data = data;
        left = nullptr;
        right = nullptr;
    }
};

class tree {
public:
    node* root;

    tree() {
        root = nullptr;
    }

    node* add(node* root, int data) {
        if (root == nullptr) {
            return new node(data);
        }
        if (data < root->data) {
            root->left = add(root->left, data);
        } else {
            root->right = add(root->right, data);
        }
        return root;
    }

    void insert(int data) {
        root = add(root, data);
    }

    void inorder(node* root) {
        if (root == nullptr) return;
        inorder(root->left);
        cout << root->data << " ";
        inorder(root->right);
    }

    void preorder(node* root){
        if(root == NULL) return ;
        cout<<root->data<<" ";
        preorder(root->left);
        preorder(root->right);
    }

    void postorder(node* root){
        if(root == NULL) return ;
        postorder(root->left);
        postorder(root->right);
        cout<<root->data<<" ";
    }




    void display() {
        cout << "Inorder Traversal: ";
        inorder(root);
        cout << endl;
        cout << "Preorder Traversal: ";
        preorder(root);
        cout<<endl;
        cout << "Postorder Traversal: ";
        postorder(root);
    }
};

int main() {
    tree t;
    t.insert(10);
    t.insert(5);
    t.insert(20);
    t.insert(3);
    t.insert(7);

    t.display();
    
    return 0;
}
